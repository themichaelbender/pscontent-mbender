#! /bin/bash
#timesyncd attempts to reach out to ntp.ubuntu.com but hangs because it gets not response, this will speed up overall loadtime.
#systemctl stop systemd-timesyncd
#systemctl disable systemd-timesyncd
# waits for proxy to be up and logs to script.test
#echo "begin proxy test" >> script.test
#response=\$$(sudo http_proxy=http://tstark:pssecrocks@172.31.245.222:8888 curl --write-out '%%{http_code}' --silent --output /dev/null www.google.com)
#while [ \$$response -ne "200" ]; do
#    echo \$$response >> script.test
#    sleep 10
#    response=\$$(sudo http_proxy=http://tstark:pssecrocks@172.31.245.222:8888 curl --write-out '%%{http_code}' --silent --output /dev/null www.google.com)
#done
#once a positive 200 response is provided throughthe proxy to google, the peaceinourtime file is reated in the home folder. Note that the other files are created in the root folder.
#echo "success">> /home/ubuntu/peaceinourtime




#beware of the need to escape characters that terraform uses. https://www.terraform.io/docs/configuration/expressions/strings.html


<powershell>


net user Administrator ${win_rdp_password}
$init = 'Initializing Custom Software Environment...'
out-file -filepath c:\Users\Administrator\Destkop\$init
$rcheck = test-path c:\rcount
if ($rcheck -eq $False) 
{
    $rcount = 0
    $rcount | out-file c:\rcount
}

function rcount_check()
{
    $rcount = get-content c:\rcount
    return $rcount
}

function rcount_inc()
{
    [int]$rcount = get-content c:\rcount
    $rcount++
    $rcount | out-file c:\rcount
}

function cred_init()
{

net user Administrator ${win_rdp_password}
new-item -ItemProperty directory -Name Lab_Files -path c:/Users/Administrator/Desktop/LAB_FILES
$message2 = "${win_rdp_password}"; $message2 |out-file -append c:/Users/Administrator/Desktop/LAB_FILES/companypw2.txt

#Establish Proxy Credentials
$global:puser = 'tstark'
$global:ppass = 'pssecrocks'
$global:psecpasswd = ConvertTo-SecureString $ppass -AsPlainText -Force
$global:proxy_credential = New-Object System.Management.Automation.PSCredential($puser, $psecpasswd)
[system.net.webrequest]::DefaultWebProxy = new-object system.net.webproxy('http://172.31.245.222:8888')
$global:webclient = New-Object System.Net.webclient
$global:webclient.Proxy.Credentials = $proxy_credential
#Establish local system credentails
$global:luser = "Administrator"
$global:lpass = "${win_rdp_password}"
$global:lsecpasswd = ConvertTo-SecureString $lpass -AsPlainText -Force
$global:local_credential = New-Object System.Management.Automation.PSCredential($luser, $lsecpasswd)
$global:local_credential
}

#disable web protection
function Disable-ieESC
{
$AdminKey = “HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}\”
$UserKey = “HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}\” 
Set-ItemProperty -Path $AdminKey -Name “IsInstalled” -Value 0
Set-ItemProperty -Path $UserKey -Name “IsInstalled” -Value 0
Stop-Process -Name Explorer
Write-Host “IE Enhanced Security Configuration (ESC) has been disabled.” -ForegroundColor Green
$message3 = "IE Enhanced Security Disabled"; $message3 | out-file c:/peaceinourtime.txt -append;
}

function Disable-ServerManager {
    New-ItemProperty -Path HKCU:\Software\Microsoft\ServerManager -Name DoNotOpenServerManagerAtLogon -PropertyType DWORD -Value “0x1” –Force
}

# function key_pull () {
#     #must have cred_init ran prior to running this function in the same boot session!
#     #set stattus via scp
#     invoke-webrequest -proxy http://172.31.245.222:8888 -proxyCredential $proxy_credential -uri https://securitylab-${guac_auth_password}.s3-us-west-2.amazonaws.com/lab-key -outfile "c:\programdata\amazon\lab-key"
#     $path = "c:\programdata\amazon\lab-key"
#     #this!
#     icacls.exe $path /reset
#     icacls.exe $path /inheritance:r
#     icacls.exe $path /GRANT "$($env:USERNAME):(R)"
#     icacls.exe $path /remove BUILTIN\\BUILTIN
#     #how to fix lab permissions :()
# }

function status_update ($s,$name) {
    #Dependencies:
    # - key_pull
    # - cred_init
    $path = "c:\programdata\amazon\lab-key"
    $status = $s
    $status | out-file "c:\$name-status"
    scp -i $path -oStrictHostKeyChecking=no "c:\$name-status" ubuntu@172.31.245.222:/home/ubuntu/$name-status     
}

function status_check ($name) {
    $path = "c:\programdata\amazon\lab-key"
    scp -i $path -oStrictHostKeyChecking=no  ubuntu@172.31.245.222:/home/ubuntu/$name-status "c:\$name-status"
    $status = get-content "c:\$name-status"
    return $status
}

#MAIN!
# Create Transcript
Start-transcript -path "C:\transcripts\transcriptMain.txt" -NoClobber

$r = rcount_check

if ($r -eq 0){

    cred_init
    # Create links

    # Windows PowerShell link
        $TargetFile = "%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe"
        $ShortcutFile = "C:\Users\Public\Desktop\Windows PowerShell (x64).lnk"
        $WScriptShell = New-Object -ComObject WScript.Shell
        $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
        $Shortcut.TargetPath = $TargetFile
        $Shortcut.IconLocation = "%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe"
        $Shortcut.Save()
        #$Host.UI.RawUI.BackgroundColor = 'DarkBlue'

remove-item “c:\Users\Administrator\Desktop\EC2 Microsoft Windows Guide.website”
    remove-item “c:\Users\Administrator\Desktop\EC2 Feedback.website”
    #chocolate install
    #need if 200 or retry logic then move on
    invoke-webrequest -Proxy http://172.31.245.222:8888 -uri https://chocolatey.org/install.ps1 -Verbose -ProxyCredential $Global:proxy_credential -OutFile install.ps1

    ###
    $env:chocolateyProxyLocation='http://tstark:pssecrocks@172.31.245.222:8888'
    $env:chocolateyProxyPassword='pssecrocks'
    $env:chocolateyProxyUser='tstark'

    ./install.ps1

    #services install
    
    choco install pwsh -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
    # PowerShell 7 link
        $TargetFile = "C:\Program Files\PowerShell\7\pwsh.exe"
        $ShortcutFile = "C:\Users\Public\Desktop\Powershell 7(x64).lnk"
        $WScriptShell = New-Object -ComObject WScript.Shell
        $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
        $Shortcut.TargetPath = $TargetFile
        $Shortcut.IconLocation = "C:\Program Files\PowerShell\7\pwsh.exe"
        $Shortcut.Save()
    

    #update-help in PowerShell
    update-help -force

    # Add RSAT
    #Get-WindowsFeature -Name *RSAT* | Install-windowsfeature

    # Create LAB_FILES directory
    ##Installing things with choco with explicit proxy test is with wireshark
    choco install git -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
    $gitlist = “-c http.proxy=http://tstark:pssecrocks@172.31.245.222:8888 clone https://github.com/ps-interactive/labs_getting_started_powershell_scripting.git c:\Users\Administrator\Desktop\lab-getting-started-powershell-scripting”
    start-process  -filepath ‘C:\Program Files\git\bin\git.exe’ -argumentlist $gitlist -wait
    copy-item -recurse ‘c:\Users\Administrator\Desktop\lab-getting-started-powershell-scripting\LAB_FILES\’ -destination ‘c:\Users\Administrator\Desktop\’
    remove-item -recurse -force c:\Users\Administrator\Desktop\lab-getting-started-powershell-scripting
    remove-item “c:\Users\Administrator\Desktop\EC2 Microsoft Windows Guide.website”
    remove-item “c:\Users\Administrator\Desktop\EC2 Feedback.website”
     
    

    # rcount +
    rcount_inc

    # Set trustedhosts, Rename computer and reboot
    choco install vscode -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
    choco install vscode-powershell -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
    set-item WSMan:\localhost\Client\TrustedHosts -Value * -Force -verbose
    Disable-ieESC
    Disable-ServerManager
    #rename-computer -NewName client01 -verbose | out-file "c:\logging.txt" -append
    $message4 = "happy hunting"; $message4 |out-file 'c:\peaceinourtime' -append
    $finit = 'Environment Initialization Complete'
    out-file -filepath c:\Users\Administrator\Destkop\$finit
    remove-item c:\Users\Administrator\Desktop\$init
    #restart-computer -force
    
    ########Pluralsight Only Do Not Change##################
    # Final Message for completion to not modify.
    new-item -ItemType Directory c:\ProgramData\psorceri
    new-item -itemtype file c:\ProgramData\psorceri\cud.bat
    $cud1='del C:\ProgramData\Amazon\EC2-Windows\Launch\Log\UserdataExecution.log'
    $cud2='del C:\ProgramData\chocolatey\logs\chocolatey.log'
    $cud3='del C:\Windows\Temp\UserScript.ps1'
    $cud5='del C:\Windows\system32\config\systemprofile\AppData\Local\Temp\Amazon\EC2-Windows\Launch\InvokeUserData\InvokeUserdataErrors.log'
    $cud6='del C:\Windows\system32\config\systemprofile\AppData\Local\Temp\Amazon\EC2-Windows\Launch\InvokeUserData\InvokeUserdataOutput.log'
    $cud7='del C:\Windows\system32\config\systemprofile\AppData\Local\Temp\Amazon\EC2-Windows\Launch\InvokeUserData\UserScript.ps1'
    $cud4='echo deleted-the-things >> c:\peaceinourtime.txt'

    $cud1 | out-file -append c:\ProgramData\psorceri\cud.bat -NoNewline -Encoding Ascii
    $cud2 | out-file -append c:\ProgramData\psorceri\cud.bat -Encoding Ascii
    $cud3 | out-file -append c:\ProgramData\psorceri\cud.bat -Encoding Ascii
    $cud5 | out-file -append c:\ProgramData\psorceri\cud.bat -Encoding Ascii
    $cud6 | out-file -append c:\ProgramData\psorceri\cud.bat -Encoding Ascii
    $cud7 | out-file -append c:\ProgramData\psorceri\cud.bat -Encoding Ascii
    $cud4 | out-file -append c:\ProgramData\psorceri\cud.bat -Encoding Ascii
    $action = New-ScheduledTaskAction -Execute "c:\ProgramData\psorceri\cud.bat" 

    $date = get-date
    $runtime = $date.addminutes(1)
    $trigger = New-ScheduledTaskTrigger -At $runtime -RepetitionDuration (New-TimeSpan -Minutes 5) -RepetitionInterval (New-TimeSpan -Minutes 1) -once
    $principal = New-ScheduledTaskPrincipal -UserID "NT Authority\System" -Runlevel Highest -LogonType ServiceAccount
    $settings = New-ScheduledTaskSettingsSet
    $task = New-scheduledtask -Action $action -Principal $principal -Trigger $trigger -Settings $settings
    Register-ScheduledTask T1 -InputObject $task
    Start-ScheduledTask -TaskName T1

    # remove route to metadataservice
    route DELETE 169.254.169.254
    netsh advfirewall firewall add rule name="Block metadata service altogether" dir=out protocol=TCP remoteip=169.254.169.254 action=block





}elseif($r -eq 1){
    
    }

</powershell>
<persist>true</persist>